<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Api on Rupak Ganguly</title>
    <link>https://rupakganguly.com/tags/api/</link>
    <description>Recent content in Api on Rupak Ganguly</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Feb 2023 14:29:05 -0500</lastBuildDate>
    
	<atom:link href="https://rupakganguly.com/tags/api/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to create a Strapi CMS app to manage content</title>
      <link>https://rupakganguly.com/posts/how-to-create-a-strapi-cms-app-to-manage-content/</link>
      <pubDate>Sun, 19 Feb 2023 14:29:05 -0500</pubDate>
      
      <guid>https://rupakganguly.com/posts/how-to-create-a-strapi-cms-app-to-manage-content/</guid>
      <description>&lt;p&gt;In this article, we will create a Strapi-powered app, to manage content using the Strapi CMS. To manage the content, we will use the Strapi Dashboard Admin UI to create the content types, create content data, set roles and permissions, and then expose the content via automatically generated APIs. Finally, we will access the APIs to retrieve the content data.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>What Is Swagger and Why It Is Used</title>
      <link>https://rupakganguly.com/glossary/what-is-swagger-and-why-it-is-used/</link>
      <pubDate>Tue, 17 Jan 2023 18:10:49 -0500</pubDate>
      
      <guid>https://rupakganguly.com/glossary/what-is-swagger-and-why-it-is-used/</guid>
      <description>&lt;p&gt;Swagger is a toolset that simplifies the design, development, documentation, and publishing of REST APIs based on OpenAPI specifications.&lt;/p&gt;

&lt;p&gt;The Swagger toolset consists of open-source and paid tools: Swagger Editor, Swagger UI, Swagger Codegen, Swagger Hub, Swagger Inspector, ReadyAPI, and AlertSite.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building an API using the Swagger toolchain</title>
      <link>https://rupakganguly.com/posts/building-an-api-using-the-swagger-toolchain/</link>
      <pubDate>Wed, 03 Oct 2018 00:29:37 -0400</pubDate>
      
      <guid>https://rupakganguly.com/posts/building-an-api-using-the-swagger-toolchain/</guid>
      <description>&lt;p&gt;We have been building APIs for ages, with varying standards and design styles - &lt;a href=&#34;https://en.wikipedia.org/wiki/SOAP&#34;&gt;SOAP&lt;/a&gt; web services, &lt;a href=&#34;https://en.wikipedia.org/wiki/GRPC&#34;&gt;gRPC&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Representational_state_transfer&#34;&gt;REST&lt;/a&gt;, and until recently &lt;a href=&#34;https://en.wikipedia.org/wiki/GraphQL&#34;&gt;GraphQL&lt;/a&gt;. Instead of declaring a winning design style, I believe that each one of these design styles stands its ground, and it depends on the use case &lt;a href=&#34;https://nordicapis.com/when-to-use-what-rest-graphql-webhooks-grpc/&#34;&gt;when to use which style&lt;/a&gt;.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Roundup of API Platforms and Specifications</title>
      <link>https://rupakganguly.com/posts/roundup-of-api-platforms-and-specifications/</link>
      <pubDate>Fri, 31 Aug 2018 12:59:38 -0400</pubDate>
      
      <guid>https://rupakganguly.com/posts/roundup-of-api-platforms-and-specifications/</guid>
      <description>&lt;p&gt;While researching for full, end-to-end, lifecycle API management tools, I discovered many that fit the bill. In this post, I compare some popular API platforms and specification formats.
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>