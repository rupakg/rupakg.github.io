<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Rupak Ganguly</title>
    <link>https://rupakganguly.com/categories/docker/</link>
    <description>Recent content in Docker on Rupak Ganguly</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 16 Oct 2018 16:09:02 -0400</lastBuildDate>
    
	<atom:link href="https://rupakganguly.com/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to build long-running serverless apps using Lambda and AWS Fargate with Stackery</title>
      <link>https://rupakganguly.com/posts/how-to-build-long-running-serverless-apps-using-lambda-and-fargate-with-stackery/</link>
      <pubDate>Tue, 16 Oct 2018 16:09:02 -0400</pubDate>
      
      <guid>https://rupakganguly.com/posts/how-to-build-long-running-serverless-apps-using-lambda-and-fargate-with-stackery/</guid>
      <description>&lt;p&gt;This is a multi-part blog series that explores building serverless applications with Stackery. In the &lt;a href=&#34;https://rupakganguly.com/posts/building-serverless-apps-using-stackery/&#34;&gt;first part&lt;/a&gt;, we discussed why Stackery is a great platform for visually building and deploying serverless applications on AWS.&lt;/p&gt;

&lt;p&gt;The application we will build is a video processing application that will take a video file dropped into a S3 bucket, along with some user-defined parameters and extract a thumbnail of the specified frame, and store it into another S3 bucket. Since the video processing bit is a long-running process, we will use AWS Fargate to process the video.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Monitoring Docker Services With Prometheus</title>
      <link>https://rupakganguly.com/posts/monitoring-docker-services-with-prometheus/</link>
      <pubDate>Tue, 21 Jul 2015 14:08:43 -0400</pubDate>
      
      <guid>https://rupakganguly.com/posts/monitoring-docker-services-with-prometheus/</guid>
      <description>With the advent of the &amp;lsquo;micro-services&amp;rsquo; architecture and the evolving trend for using Docker, monolithic applications are being broken up into smaller and independent services. The idea is to keep the services small so that small groups of developers can work on them, upgrade or patch them quickly, and build &amp;amp; release them continuously. Although that vision is promising, it introduces complexity as the number of services grow. With that also grows the need to monitor these services around the clock, to maintain the healthy functioning of the application.</description>
    </item>
    
    <item>
      <title>CenturyLink Labs Goes to DockerCon 2015</title>
      <link>https://rupakganguly.com/posts/centurylink-labs-goes-to-dockercon-2015/</link>
      <pubDate>Wed, 15 Jul 2015 13:49:28 -0400</pubDate>
      
      <guid>https://rupakganguly.com/posts/centurylink-labs-goes-to-dockercon-2015/</guid>
      <description>It was an exciting time for us again to be attending DockerCon 2015 this year. It was the 2nd DockerCon, and was way bigger than the first one. Our whole CenturyLink Labs team was there, excited to hear the new announcements from Docker and the rest of the community.
The opening keynote by Ben Golub, CEO of Docker, was followed by Docker&amp;rsquo;s Founder &amp;amp; CTO, Solomon Hykes. The keynote session was followed by a variety of breakout tracks taking place throughout the day.</description>
    </item>
    
    <item>
      <title>Lorry.io: Pathway to Docker Composable Apps</title>
      <link>https://rupakganguly.com/posts/lorry-io-pathway-to-docker-composable-apps/</link>
      <pubDate>Tue, 26 May 2015 13:26:19 -0400</pubDate>
      
      <guid>https://rupakganguly.com/posts/lorry-io-pathway-to-docker-composable-apps/</guid>
      <description>Recently, Docker released the Compose tool for defining and running complex applications with Docker. The basic component of that tool is the file, docker-compose.yml. We at CenturyLink were big fans of Fig, the basis for Compose and the docker-compose.yml, but always envisioned a utility that could facilitate creating the docker-compose.yml files easily and intuitively.
 From that idea, we are happy to announce our latest project, Lorry.io, a docker-compose.yml validator, editor and composer.</description>
    </item>
    
    <item>
      <title>Managing Application Code in Linux Containers</title>
      <link>https://rupakganguly.com/posts/managing-application-code-in-linux-containers/</link>
      <pubDate>Fri, 10 Oct 2014 13:31:40 -0400</pubDate>
      
      <guid>https://rupakganguly.com/posts/managing-application-code-in-linux-containers/</guid>
      <description>Many developers have heard of Linux containers and Docker. But how do you deploy your code to an application running in Linux containers?
Let&amp;rsquo;s go over that in this article, using a very simple yet effective workflow. We&amp;rsquo;ll focus on WordPress, but these principles can be used with Ruby, Python, or even Go applications.
I think most of the time, users need to manage Wordpress for adding/updating plugins, themes etc.</description>
    </item>
    
  </channel>
</rss>