<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Containers on Rupak Ganguly</title>
    <link>http://rupakganguly.com/categories/containers/</link>
    <description>Recent content in Containers on Rupak Ganguly</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 May 2015 13:26:19 -0400</lastBuildDate>
    
	<atom:link href="http://rupakganguly.com/categories/containers/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Lorry.io: Pathway to Docker Composable Apps</title>
      <link>http://rupakganguly.com/posts/lorry-io-pathway-to-docker-composable-apps/</link>
      <pubDate>Tue, 26 May 2015 13:26:19 -0400</pubDate>
      
      <guid>http://rupakganguly.com/posts/lorry-io-pathway-to-docker-composable-apps/</guid>
      <description>Recently, Docker released the Compose tool for defining and running complex applications with Docker. The basic component of that tool is the file, docker-compose.yml. We at CenturyLink were big fans of Fig, the basis for Compose and the docker-compose.yml, but always envisioned a utility that could facilitate creating the docker-compose.yml files easily and intuitively.
 From that idea, we are happy to announce our latest project, Lorry.io, a docker-compose.yml validator, editor and composer.</description>
    </item>
    
    <item>
      <title>Managing Application Code in Linux Containers</title>
      <link>http://rupakganguly.com/posts/managing-application-code-in-linux-containers/</link>
      <pubDate>Fri, 10 Oct 2014 13:31:40 -0400</pubDate>
      
      <guid>http://rupakganguly.com/posts/managing-application-code-in-linux-containers/</guid>
      <description>Many developers have heard of Linux containers and Docker. But how do you deploy your code to an application running in Linux containers?
Let&amp;rsquo;s go over that in this article, using a very simple yet effective workflow. We&amp;rsquo;ll focus on WordPress, but these principles can be used with Ruby, Python, or even Go applications.
I think most of the time, users need to manage Wordpress for adding/updating plugins, themes etc.</description>
    </item>
    
  </channel>
</rss>